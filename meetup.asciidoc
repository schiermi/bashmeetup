= bash Meetup
Andreas Schiermeier <andreas@schiermeier.name>
:data-uri:

== Wer bin ich

USER=schiermi
NAME=Andreas Schiermeier
EMAIL=andreas@schiermeier.name
TWITTER=@schiermi
=üêß@üíª üö¥ https://ccc-ffm.de/
EMPLOYER=FactSet Digital Solutions GmbH


== Shells (sh, ksh, bash, zsh)

=== Was ist eine Shell, bash
  Lt. _man 1 bash_ ein "command language interpreter"
  Eine Programmiersprache f√ºr Betriebssystemprozesse.
  Wahlweise mit direkter Kommandoeingabe (interaktive Shell) oder nach einem "Drehbuch" (Shellskript).
  Interaktiv kann der Bediener auf unvorhergesehene (Fehler) reagieren. Passiert im Script zuviel Unbedachtes muss √∂fters gedreht oder dass Drehbuch werden.

=== Geschichte
  Anfang der 1970er Jahre: Unix-Shells
  Ende der 1970er: Stephen R. *Bourne Shell*, sh, Basis aktueller UNIX-shells; sowie ksh, csh
  Ende der 1980er: bash bourne again shell vereint und erweitert bekannte Features
  Anfang der 1990er: zsh, weitere neue Ans√§tze, werden teilweise auch in bash √ºbernommen
  Aktuell: bash ist in vielen Systemen und Umgebungen verf√ºgbar; oft Standardshell

== Usability (im interaktiven Betrieb)

Vorraussetzung & Einstiegsh√ºrde: Kommandos m√ºssen bekannt sein

H√§ufig verwendet: Tastenkombinationen mit ‚ú≤ (Strg, Steuerung, Ctrl, Control)

‚èé (Zeilenschaltung, newline): Bringt die Anweisungen zur Ausf√ºhrung
‚ú≤+C Eingabe oder Programmausf√ºhrung abbrechen (genauer: sendet Signal 2, SIGINT)
‚Üê ‚Üí Innerhalb der Befehlszeile navigieren
‚Üë ‚Üì Innerhalb der Befehlszeilenhistorie navigieren
‚ú≤+R In der Befehlszeilenhistorie suchen
‚ú≤+A Springe in der Befehlszeile an den Anfang (via readline)
‚ú≤+E Springe in der Befehlszeile an das Ende (via readline)
‚ú≤+Z Vordergrundprogramm in interaktiver Shell mit Jobcontrol anhalten (sende Signal 19, SIGSTOP)
‚ú≤+D Sende EOF (beende die Eingabe)

Achtung: Unter Umst√§nden werden Tastenkombinationen vom Betriebssystem, der grafischen Benutzeroberfl√§che oder dem Terminalemulator abgefangen.
Desweiteren k√∂nnen Terminal (tty) oder die readline Bibliothek abweichend arbeiten

== Kommandos: Programme, Builtins, Funktionen, Aliase

Kommandos k√∂nnen Programme, Builtins, Funktionen oder Aliase sein.

*Programme* sind per Dateisystempfad vom Betriebssystem auffindbar und werden diesem zur Ausf√ºhrung √ºberlassen.
z.B. /bin/ls, /bin/mv

*Builtins* sind aus Effizients- oder Machbarkeitsgr√ºnden von der Shell _selbst_ abgearbeitete Befehle
z.B. (Effizientz): pwd, test, [, time
z.B. (Machbarkeit): cd, read, umask, return, exit, [[, builtin, command

man 1 bash, SHELL BUILTIN COMMANDS
help
help builinname

*Funktionen* fassen mehrere Kommandos als benannte Subroutine zusammen (vergleichbar zu Programmiersprachen)

Definition: function fname () { ‚Ä¶; }

Welche Funktionen gibt es?
declare -F
‚Ä¶inkl. Definition
declare -f

*Aliase* als Abk√ºrzung f√ºr h√§ufig genutzte Aufrufe

z.B.
alias la='ls -la' # Eingabe von la f√ºhrt "ls -la" aus
alias cd..='cd ..'

Aliase auflisten:
alias
Alias l√∂schen:
unalias la

Suchreihenfolge: Alias, Funktion, Builtin, Programm (Suche anhand PATH)

Details: `man 1 bash`, "COMMAND EXECUTION"

== Variablen & Arrays - Deklaration

|=============================================================================
| `variable='inhalt'` |
| `declare variable='inhalt'` |
| `declare -i variable=1542650400` | Ganzzahl, Zuweisung einer Zeichenkette ergibt 0!
| `declare -ri c='299792458'`      | Ganzzahl, readonly
| `unset variable`                 | Variable l√∂schen
| `declare -a indexarray=( 'Stickstoff' 'Sauerstoff' 'Rest' )` | Indiziertes Array (Start: 0)
| `declare -A keyarray=( ['VW']='Abschalteinrichtung' ['Frankfurt']='Stimmenz√§hlung' )` | Textindiziertes Array
| `unset array`                    | ganzes Array l√∂schen
| `unset array[index]`             | Wert an Index in Array l√∂schen
|=============================================================================

Innerhalb von Funktionen f√ºr lokale Variablen innerhalb der Subroutine:
`local` statt `declare`.

== Variablen & Arrays - Verwendung

Zugriff auf einfache Variablen: $variable
‚Ä¶oder: ${variable}
z.B. echo "${HOME}"

Zugriff auf Element an Index 1: ${indexarray[1]}
Alle Elemente: ${indexarray[@]}
Anzahl der Elemente: ${#indexarray[@]}

Zugriff auf Element von Index "key": ${keyarray["key"]}
Alle Keys: ${!keyarray[@]}
Alle Elemente: ${keyarray[@]}

== besondere Variablen

$0: Scriptname
$#: Anzahl der √ºbergebenen Parameter
$1, $2 ‚Ä¶ $n: dem Script √ºbergebene Parameter
$*: dem Script √ºbergebene Parameter als String verbunden
$@: dem Script √ºbergebene Parameter als Array
wenn >= 10: ${10}, ${11}, ‚Ä¶

$$ Prozess-ID der Shell
$? Fehlercode des zuletzt beendeten Programms
${PPID} Prozess-ID des Elternprozesses
${HOSTNAME}: Hostname des das Script ausf√ºhrenden Systems
${PWD}: aktuelles Arbeitsverzeichnis

${HOME}: Hauptverzeichnis des angemeldeten Benutzers; Ziel f√ºr "cd" und Wert von ~
${PATH}: Suchpfad f√ºr ohne vollen Pfad aufgerufene *Programme*

Beispiel:
PATH="/home/as/bin:/usr/local/bin:/usr/bin:/bin:/usr/lib/mit/sbin"
Befehl: ls
Suche nach (erster Treffer "gewinnt"):
/home/as/bin/ls
/usr/local/bin/ls
/usr/bin/ls
/bin/ls
/usr/lib/mit/sbin/ls

"Suchergebnis" wird f√ºr die Laufzeit der Shell vermerkt!

Suchcache anzeigen: hash -l
Suchcache leeren: hash -r

Weitere "besondere" Variablen: man 1 bash, PARAMETERS

== Parametertrennung

Noch eine Variable mehr: IFS

${IFS}: *Internal Field Separator*; Trennzeichen f√ºr 
Standard: Leerzeichen, Tabulator, Zeilenumbruch

unset

Tipp: Das erste Zeichen aus IFS wird bei "$*" als Verbindungszeichen der Elemente verwendet.

== Platzhalter & Textersetzung in Kommandos

Allgemein: Textersetzungen im eingegebenen oder eingelesenen Kommando

*Wildcards (√ºblicherweise anhand von Dateinamen)*
|================================================
|*     | keines bis beliebig viele Zeichen
|?     | exakt ein beliebiges Zeichen
|[0-9] | ein Zeichen aus dem angegebenen Bereich
|================================================

Kombinierbar, z.B.: [0-9]*.csv

*Variablen*: bereits bekannt

*Berechnungen* via $(( ‚Ä¶ )) z.B.: i=2; echo $(( i + 2 ))

*Klammererweiterung* via Zeichenbereiche z.B.: {2000..2018}{01..12}{a..f}.txt

*Prozesssubstitution* Ausgabe (STDOUT) von anderen Programmen als Parameter nutzen
  z.B. echo "Externe IP: $(curl -s ifconfig.co)"
  veraltet: echo "Externe IP: `curl -s ifconfig.co`
  √§hnlich: Dateiinhalt als Parameter nutzen $(< /etc/passwd)

~ Wert von ${HOME}
~BENUTZERNAME HOME-Verzeichnis eines (anderen) Benutzers

== Ausgabeumleitung, Pipes

|==========================================================================
| cmd1 \| cmd2 | STDOUT von cmd1 mit STDIN von cmd2 verbinden
| cmd1 \|& cmd2 | STDOUT und STDERR von cmd1 mit STDIN von cmd2 verbinden
| cmd > datei | STDOUT von cmd datei schreiben
| cmd >> datei | STDOUT von cmd an datei anh√§ngen
| cmd < datei | STDIN f√ºr cmd aus datei einlesen
| cmd1 < <( cmd2 ) | STDOUT der Subshell von cmd2 als STDIN f√ºr cmd1
|==========================================================================


== Hashbang - der Anfang vom Script

=== Hintergrund
Im Allgemeinen signalisiert der Hashbang (#!) dem Betriebssystem dass diese Datei
nicht als Bin√§rdatei ausgef√ºhrt werden kann, sondern ein Interpreter zu Hilfe genommen werden soll.

=== M√∂gliche Varianten
|=============================================================================
| #!/bin/bash         | eindeutig, bash muss jedoch in /bin vorhanden sein
| #!/bin/sh           | sollte nicht verwendet werden, wenn bash-Features verwendet werden
| #!/usr/bin/env bash | findet bash (oder generell den angegebenen Interpreter auch an ungew√∂hnlichen Pfaden; ben√∂tigt aber im Gegenzug einen Zwischenschritt
|=============================================================================
  
== Der Anfang vom Script - was sonst noch praktisch ist

=== Laufzeiteinstellungen
|=============================================================================
| set -o nounset | Zugriff auf uninitialisierte Variablen erzeugt einen Fehler
| set -o errexit | Nicht abgefangene Fehler (rc != 0) beenden das Script
| set -o pipefail | Fehler in Pipes-Ketten werden als Fehler des gesamten Konstrukts gewertet
| set -o noclobber | verhindert das √úberschreiben bestehender Dateien mit >, force: # >|
| IFS=$'\n\t' | verhindert, dass Leerzeichen als Worttrenner verwendet werden
|=============================================================================

=== Tools & Styleguide
|=============================================================================
| https://www.shellcheck.net/ | Untersucht Script auf potenzielle Fehlerquellen
| https://google.github.io/styleguide/shell.xml | Styleguide f√ºr Shellskripte 
|=============================================================================

== Der Ende vom Script - Aufr√§umen!

mktemp
trap

iconv, tr, jq, xargs




